<?php

/**
* Implements hook_entity_info().
*/

function artwork_entity_info() {
$return['artwork'] = array(
'label' => t('Artwork'),
'controller class' => 'ArtworkController',
'base table' => 'artwork',
'revision table' => 'artwork_revision',
'uri callback' => 'artwork_uri',
'fieldable' => TRUE,
'entity keys' => array(
'id' => 'aid',
'revision' => 'vid',
'bundle' => 'type',
'label' => 'title',
),
'bundle keys' => array(
'bundle' => 'type',
),
'static cache' => TRUE,
'bundles' => array(),
'view modes' => array(
'full' => array(
'label' => t('Full content'),
'custom settings' => FALSE,
),
'teaser' => array(
'label' => t('Teaser'),
'custom settings' => FALSE,
),
),
);
foreach (artwork_types() as $type => $info) {
$return['artwork']['bundles'][$type] = array(
'label' => $info->name,
'admin' => array(
'path' => 'admin/structure/artworks/manage/%artwork_type',
'real path' => 'admin/structure/artworks/manage/' .
str_replace('_', '-', $type),
'bundle argument' => 4,
'access arguments' => array('administer artworks'),
),
);
}
return $return;
}

function artwork_uri($artwork) {
return array(
'path' => 'artwork/' . $artwork->aid,
);
}

function artwork_types() {
$types = &drupal_static(__FUNCTION__);
if (empty($types)) {
$types['painting'] = (object)array(
'type' => 'painting',
'name' => t('Painting'),
'description' => t('A picture made with paint.')
);
$types['sculpture'] = (object)array(
'type' => 'sculpture',
'name' => t('Sculpture'),
'description' => t('A carving made out of stone or wood.')
);
}
return $types;
}
function artwork_type_load($type) {
$types = artwork_types();
$type = str_replace('-', '_', $type);
return isset($types[$type]) ? $types[$type] : FALSE;
}


function artwork_menu() {
$items['admin/structure/artworks'] = array(
'title' => 'Manage artworks',
'description' => 'Manage artworks.',
'page callback' => 'artwork_overview_types',
'access arguments' => array('administer artworks'),
);
$items['admin/structure/artworks/manage/%artwork_type'] = array(
'title' => 'View artwork type',
'title callback' => 'artwork_type_page_title',
'title arguments' => array(4),
'page callback' => 'artwork_information',
'page arguments' => array(4),
'access arguments' => array('administer artworks'),
);
$items['admin/structure/artworks/manage/%artwork_type/view'] = array(
'title' => 'View',
'type' => MENU_DEFAULT_LOCAL_TASK,
);
return $items;

$items['artwork/add'] = array(
'title' => 'Add new artwork',
'page callback' => 'artwork_add_page',
'access arguments' => array('create artworks'),
'weight' => 1,
'menu_name' => 'management',
'file' => 'artwork.pages.inc',
);
foreach (artwork_types() as $type) {
$type_url_str = str_replace('_', '-', $type->type);
$items['artwork/add/' . $type_url_str] = array(
'title' => $type->name,
'title callback' => 'check_plain',
'page callback' => 'artwork_add',
'page arguments' => array(2),
'access arguments' => array('create artwork'),
'description' => $type->description,
);
}

return $items;
}

function artwork_overview_types() {
foreach (artwork_types() as $type => $info) {
$type_url_str = str_replace('_', '-', $type);
$label = t('View @type', array('@type' => $info->name));
$items[] = l($label, 'admin/structure/artworks/manage/' .
$type_url_str);
}
return theme('item_list', array('items' => $items));
}

function artwork_type_page_title($type) {
return t('Manage @type', array('@type' => $type->name));
}

function artwork_information($artwork_type) {
return $artwork_type->name . ': ' . $artwork_type->description;
}

function artwork_add($type) {
global $user;
$types = artwork_types();
$type = isset($type) ? str_replace('-', '_', $type) : NULL;
if (empty($types[$type])) {
return MENU_NOT_FOUND;
}
$artwork = entity_get_controller('artwork')->create($type);
drupal_set_title(t('Create @name', array('@name' =>
$types[$type]->name)), PASS_THROUGH);
return drupal_get_form($type . '_artwork_form', $artwork);
}

function artwork_forms() {
$forms = array();
if ($types = artwork_types()) {
foreach (array_keys($types) as $type) {
$forms[$type . '_artwork_form']['callback'] = 'artwork_form';
}
}
return $forms;
}

function artwork_form($form, &$form_state, $artwork) {
// Set the id to identify this as an artwork edit form.
$form['#id'] = 'artwork-form';
// Save the artwork for later, in case we need it.
$form['#artwork'] = $artwork;
$form_state['artwork'] = $artwork;
// Common fields. We don't have many.
$form['title'] = array(
'#type' => 'textfield',
'#title' => t('Title'),
'#default_value' => $artwork->title,
'#weight' => -5,
'#required' => TRUE,
);
$form['revision'] = array(
'#access' => user_access('administer artworks'),
'#type' => 'checkbox',
'#title' => t('Create new revision'),
'#default_value' => 0,
);
// Add the buttons.
$form['buttons'] = array();
$form['buttons']['#weight'] = 100;
$form['buttons']['submit'] = array(
'#type' => 'submit',
'#value' => t('Save'),
'#weight' => 5,
'#submit' => array('artwork_form_submit'),
);
if (!empty($artwork->aid)) {
$form['buttons']['delete'] = array(
'#access' => user_access('delete artworks'),
'#type' => 'submit',
'#value' => t('Delete'),
'#weight' => 15,
'#submit' => array('artwork_form_delete_submit'),
);
}
$form['#validate'][] = 'artwork_form_validate';
field_attach_form('artwork', $artwork, $form, $form_state);
return $form;
}

function artwork_form_validate($form, &$form_state) {
$artwork = $form_state['artwork'];
// Field validation.
field_attach_form_validate('artwork', $artwork, $form, $form_state);
}

function artwork_form_submit($form, &$form_state) {
global $user;
$artwork = &$form_state['artwork'];
// Set the artwork's uid if it's being created at this time.
if (empty($artwork->uid)) {
$artwork->uid = $user->uid;
}
$artwork->title = $form_state['values']['title'];
$artwork->revision = $form_state['values']['revision'];
// Notify field widgets.
field_attach_submit('artwork', $artwork, $form, $form_state);
// Save the artwork.
artwork_save($artwork);
// Notify the user.
drupal_set_message(t('Artwork saved.'));
$form_state['redirect'] = 'artwork/' . $artwork->aid;
}

function artwork_save($artwork) {
return entity_get_controller('artwork')->save($artwork);
}
